#version 450

const uint work_size = 256;

layout (local_size_x = work_size) in;

layout(constant_id = 0) const uint count = 4;
const uint size = 256 * 20;
layout(constant_id = 1) const float max_x = 300;
layout(constant_id = 2) const float max_y = 300;
const float radius = 1.0;

layout(binding = 0, std430) buffer world_in{
  vec2 s[size];
  vec2 v[size];
  vec4 color[size];
};

layout(binding = 1, std430) buffer world_out{
  float energy[size];
};

void bounds_check(inout vec2 pos, inout vec2 vel) {
  if (pos.x + radius > max_x) {
    pos.x -= pos.x - max_x + radius;
    vel.x *= -1;
  } else if (pos.x < radius) {
    pos.x -= pos.x - radius;
    vel.x *= -1;
  }
  if (pos.y + radius > max_y) {
    pos.y -= pos.y - max_y + radius;
    vel.y *= -1;
  } else if (pos.y < radius) {
    pos.y -= pos.y - radius;
    vel.y *= -1;
  }
}

void main() {
	uint id = gl_LocalInvocationIndex + gl_WorkGroupID.x * 256;

  // 1/2 m * v^2
  energy[id] = 0.5 * dot(v[id], v[id]);
  
  if(color[id].r > 0.2){
    color[id].r -= 0.05;
  }
  s[id] += v[id];
  bounds_check(s[id], v[id]);
  vec2 delta_v = vec2(0, 0);
  vec2 delta_s = vec2(0,0);
  for(uint i = 0; i < count; i++) {
    if(i != id && distance(s[id], s[i]) < radius * 2) {
      color[id].r = 0.8;
      vec2 ds = s[id] - s[i];
      delta_v = - dot(v[id] - v[i], ds) / dot(ds, ds) * ds;
      delta_s = normalize(ds) * 0.01;
    }
  }

  barrier();
  v[id] += delta_v;
  s[id] += delta_s;
}