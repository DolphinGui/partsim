#version 450

layout (local_size_x = 256) in;

layout(constant_id = 0) const uint count = 4;
const uint size = 5000;
layout(constant_id = 1) const float max_x = 300;
layout(constant_id = 2) const float max_y = 300;
const float radius = 1.0;

layout(binding = 0, std430) buffer world_in{
  vec2 s[size];
  vec2 v[size];
  vec4 color[size];
};

void bounds_check(inout vec2 pos, inout vec2 vel) {
  if (pos.x + radius > max_x) {
    pos.x -= pos.x - max_x + radius;
    vel.x *= -1;
  } else if (pos.x < radius) {
    pos.x -= pos.x - radius;
    vel.x *= -1;
  }
  if (pos.y + radius > max_y) {
    pos.y -= pos.y - max_y + radius;
    vel.y *= -1;
  } else if (pos.y < radius) {
    pos.y -= pos.y - radius;
    vel.y *= -1;
  }
}

void collision_check(inout vec2 s, inout vec2 v, vec2 s_2, vec2 v_2){
  if(distance(s, s_2) < radius * 2) {
    vec2 ds = s - s_2;
    v -= dot(v - v_2, ds) / dot(ds, ds) * ds;
    s += normalize(ds) * 0.01;
  }
}

void main() {
	uint id = gl_LocalInvocationIndex + gl_WorkGroupID.x * 256;
  if(id < count){
    s[id] += v[id];
    bounds_check(s[id], v[id]);
    for(uint i = 0; i < count; i++) {
      if(i != id) {
        collision_check(s[id], v[id], s[i], v[i]);
      }
    }
  }
}